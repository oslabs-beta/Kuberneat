/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/oauth";
exports.ids = ["vendor-chunks/oauth"];
exports.modules = {

/***/ "(rsc)/./node_modules/oauth/index.js":
/*!*************************************!*\
  !*** ./node_modules/oauth/index.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.OAuth = __webpack_require__(/*! ./lib/oauth */ \"(rsc)/./node_modules/oauth/lib/oauth.js\").OAuth;\nexports.OAuthEcho = __webpack_require__(/*! ./lib/oauth */ \"(rsc)/./node_modules/oauth/lib/oauth.js\").OAuthEcho;\nexports.OAuth2 = __webpack_require__(/*! ./lib/oauth2 */ \"(rsc)/./node_modules/oauth/lib/oauth2.js\").OAuth2;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb2F1dGgvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUFBLHVHQUE0QztBQUM1Q0EsK0dBQW9EO0FBQ3BEQSwyR0FBK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9rdWJlcm5lYXQtbmV4dC1hcHAvLi9ub2RlX21vZHVsZXMvb2F1dGgvaW5kZXguanM/NTg5NSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLk9BdXRoID0gcmVxdWlyZShcIi4vbGliL29hdXRoXCIpLk9BdXRoO1xuZXhwb3J0cy5PQXV0aEVjaG8gPSByZXF1aXJlKFwiLi9saWIvb2F1dGhcIikuT0F1dGhFY2hvO1xuZXhwb3J0cy5PQXV0aDIgPSByZXF1aXJlKFwiLi9saWIvb2F1dGgyXCIpLk9BdXRoMjsiXSwibmFtZXMiOlsiZXhwb3J0cyIsIk9BdXRoIiwicmVxdWlyZSIsIk9BdXRoRWNobyIsIk9BdXRoMiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/oauth/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/oauth/lib/_utils.js":
/*!******************************************!*\
  !*** ./node_modules/oauth/lib/_utils.js ***!
  \******************************************/
/***/ ((module) => {

"use strict";
eval("// Returns true if this is a host that closes *before* it ends?!?!\n\nmodule.exports.isAnEarlyCloseHost = function(hostName) {\n    return hostName && hostName.match(\".*google(apis)?.com$\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb2F1dGgvbGliL191dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxrRUFBa0U7O0FBQ2xFQSxpQ0FBaUMsR0FBRSxTQUFVRyxRQUFRO0lBQ25ELE9BQU9BLFlBQVlBLFNBQVNDLEtBQUssQ0FBQztBQUNwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2t1YmVybmVhdC1uZXh0LWFwcC8uL25vZGVfbW9kdWxlcy9vYXV0aC9saWIvX3V0aWxzLmpzPzEzOTMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gUmV0dXJucyB0cnVlIGlmIHRoaXMgaXMgYSBob3N0IHRoYXQgY2xvc2VzICpiZWZvcmUqIGl0IGVuZHM/IT8hXG5tb2R1bGUuZXhwb3J0cy5pc0FuRWFybHlDbG9zZUhvc3Q9IGZ1bmN0aW9uKCBob3N0TmFtZSApIHtcbiAgcmV0dXJuIGhvc3ROYW1lICYmIGhvc3ROYW1lLm1hdGNoKFwiLipnb29nbGUoYXBpcyk/LmNvbSRcIilcbn0iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImlzQW5FYXJseUNsb3NlSG9zdCIsImhvc3ROYW1lIiwibWF0Y2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/oauth/lib/_utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/oauth/lib/oauth.js":
/*!*****************************************!*\
  !*** ./node_modules/oauth/lib/oauth.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var crypto = __webpack_require__(/*! crypto */ \"crypto\"), sha1 = __webpack_require__(/*! ./sha1 */ \"(rsc)/./node_modules/oauth/lib/sha1.js\"), http = __webpack_require__(/*! http */ \"http\"), https = __webpack_require__(/*! https */ \"https\"), URL = __webpack_require__(/*! url */ \"url\"), querystring = __webpack_require__(/*! querystring */ \"querystring\"), OAuthUtils = __webpack_require__(/*! ./_utils */ \"(rsc)/./node_modules/oauth/lib/_utils.js\");\nexports.OAuth = function(requestUrl, accessUrl, consumerKey, consumerSecret, version, authorize_callback, signatureMethod, nonceSize, customHeaders) {\n    this._isEcho = false;\n    this._requestUrl = requestUrl;\n    this._accessUrl = accessUrl;\n    this._consumerKey = consumerKey;\n    this._consumerSecret = this._encodeData(consumerSecret);\n    if (signatureMethod == \"RSA-SHA1\") {\n        this._privateKey = consumerSecret;\n    }\n    this._version = version;\n    if (authorize_callback === undefined) {\n        this._authorize_callback = \"oob\";\n    } else {\n        this._authorize_callback = authorize_callback;\n    }\n    if (signatureMethod != \"PLAINTEXT\" && signatureMethod != \"HMAC-SHA1\" && signatureMethod != \"RSA-SHA1\") throw new Error(\"Un-supported signature method: \" + signatureMethod);\n    this._signatureMethod = signatureMethod;\n    this._nonceSize = nonceSize || 32;\n    this._headers = customHeaders || {\n        \"Accept\": \"*/*\",\n        \"Connection\": \"close\",\n        \"User-Agent\": \"Node authentication\"\n    };\n    this._clientOptions = this._defaultClientOptions = {\n        \"requestTokenHttpMethod\": \"POST\",\n        \"accessTokenHttpMethod\": \"POST\",\n        \"followRedirects\": true\n    };\n    this._oauthParameterSeperator = \",\";\n};\nexports.OAuthEcho = function(realm, verify_credentials, consumerKey, consumerSecret, version, signatureMethod, nonceSize, customHeaders) {\n    this._isEcho = true;\n    this._realm = realm;\n    this._verifyCredentials = verify_credentials;\n    this._consumerKey = consumerKey;\n    this._consumerSecret = this._encodeData(consumerSecret);\n    if (signatureMethod == \"RSA-SHA1\") {\n        this._privateKey = consumerSecret;\n    }\n    this._version = version;\n    if (signatureMethod != \"PLAINTEXT\" && signatureMethod != \"HMAC-SHA1\" && signatureMethod != \"RSA-SHA1\") throw new Error(\"Un-supported signature method: \" + signatureMethod);\n    this._signatureMethod = signatureMethod;\n    this._nonceSize = nonceSize || 32;\n    this._headers = customHeaders || {\n        \"Accept\": \"*/*\",\n        \"Connection\": \"close\",\n        \"User-Agent\": \"Node authentication\"\n    };\n    this._oauthParameterSeperator = \",\";\n};\nexports.OAuthEcho.prototype = exports.OAuth.prototype;\nexports.OAuth.prototype._getTimestamp = function() {\n    return Math.floor(new Date().getTime() / 1000);\n};\nexports.OAuth.prototype._encodeData = function(toEncode) {\n    if (toEncode == null || toEncode == \"\") return \"\";\n    else {\n        var result = encodeURIComponent(toEncode);\n        // Fix the mismatch between OAuth's  RFC3986's and Javascript's beliefs in what is right and wrong ;)\n        return result.replace(/\\!/g, \"%21\").replace(/\\'/g, \"%27\").replace(/\\(/g, \"%28\").replace(/\\)/g, \"%29\").replace(/\\*/g, \"%2A\");\n    }\n};\nexports.OAuth.prototype._decodeData = function(toDecode) {\n    if (toDecode != null) {\n        toDecode = toDecode.replace(/\\+/g, \" \");\n    }\n    return decodeURIComponent(toDecode);\n};\nexports.OAuth.prototype._getSignature = function(method, url, parameters, tokenSecret) {\n    var signatureBase = this._createSignatureBase(method, url, parameters);\n    return this._createSignature(signatureBase, tokenSecret);\n};\nexports.OAuth.prototype._normalizeUrl = function(url) {\n    var parsedUrl = URL.parse(url, true);\n    var port = \"\";\n    if (parsedUrl.port) {\n        if (parsedUrl.protocol == \"http:\" && parsedUrl.port != \"80\" || parsedUrl.protocol == \"https:\" && parsedUrl.port != \"443\") {\n            port = \":\" + parsedUrl.port;\n        }\n    }\n    if (!parsedUrl.pathname || parsedUrl.pathname == \"\") parsedUrl.pathname = \"/\";\n    return parsedUrl.protocol + \"//\" + parsedUrl.hostname + port + parsedUrl.pathname;\n};\n// Is the parameter considered an OAuth parameter\nexports.OAuth.prototype._isParameterNameAnOAuthParameter = function(parameter) {\n    var m = parameter.match(\"^oauth_\");\n    if (m && m[0] === \"oauth_\") {\n        return true;\n    } else {\n        return false;\n    }\n};\n// build the OAuth request authorization header\nexports.OAuth.prototype._buildAuthorizationHeaders = function(orderedParameters) {\n    var authHeader = \"OAuth \";\n    if (this._isEcho) {\n        authHeader += 'realm=\"' + this._realm + '\",';\n    }\n    for(var i = 0; i < orderedParameters.length; i++){\n        // Whilst the all the parameters should be included within the signature, only the oauth_ arguments\n        // should appear within the authorization header.\n        if (this._isParameterNameAnOAuthParameter(orderedParameters[i][0])) {\n            authHeader += \"\" + this._encodeData(orderedParameters[i][0]) + '=\"' + this._encodeData(orderedParameters[i][1]) + '\"' + this._oauthParameterSeperator;\n        }\n    }\n    authHeader = authHeader.substring(0, authHeader.length - this._oauthParameterSeperator.length);\n    return authHeader;\n};\n// Takes an object literal that represents the arguments, and returns an array\n// of argument/value pairs.\nexports.OAuth.prototype._makeArrayOfArgumentsHash = function(argumentsHash) {\n    var argument_pairs = [];\n    for(var key in argumentsHash){\n        if (argumentsHash.hasOwnProperty(key)) {\n            var value = argumentsHash[key];\n            if (Array.isArray(value)) {\n                for(var i = 0; i < value.length; i++){\n                    argument_pairs[argument_pairs.length] = [\n                        key,\n                        value[i]\n                    ];\n                }\n            } else {\n                argument_pairs[argument_pairs.length] = [\n                    key,\n                    value\n                ];\n            }\n        }\n    }\n    return argument_pairs;\n};\n// Sorts the encoded key value pairs by encoded name, then encoded value\nexports.OAuth.prototype._sortRequestParams = function(argument_pairs) {\n    // Sort by name, then value.\n    argument_pairs.sort(function(a, b) {\n        if (a[0] == b[0]) {\n            return a[1] < b[1] ? -1 : 1;\n        } else return a[0] < b[0] ? -1 : 1;\n    });\n    return argument_pairs;\n};\nexports.OAuth.prototype._normaliseRequestParams = function(args) {\n    var argument_pairs = this._makeArrayOfArgumentsHash(args);\n    // First encode them #3.4.1.3.2 .1\n    for(var i = 0; i < argument_pairs.length; i++){\n        argument_pairs[i][0] = this._encodeData(argument_pairs[i][0]);\n        argument_pairs[i][1] = this._encodeData(argument_pairs[i][1]);\n    }\n    // Then sort them #3.4.1.3.2 .2\n    argument_pairs = this._sortRequestParams(argument_pairs);\n    // Then concatenate together #3.4.1.3.2 .3 & .4\n    var args = \"\";\n    for(var i = 0; i < argument_pairs.length; i++){\n        args += argument_pairs[i][0];\n        args += \"=\";\n        args += argument_pairs[i][1];\n        if (i < argument_pairs.length - 1) args += \"&\";\n    }\n    return args;\n};\nexports.OAuth.prototype._createSignatureBase = function(method, url, parameters) {\n    url = this._encodeData(this._normalizeUrl(url));\n    parameters = this._encodeData(parameters);\n    return method.toUpperCase() + \"&\" + url + \"&\" + parameters;\n};\nexports.OAuth.prototype._createSignature = function(signatureBase, tokenSecret) {\n    if (tokenSecret === undefined) var tokenSecret = \"\";\n    else tokenSecret = this._encodeData(tokenSecret);\n    // consumerSecret is already encoded\n    var key = this._consumerSecret + \"&\" + tokenSecret;\n    var hash = \"\";\n    if (this._signatureMethod == \"PLAINTEXT\") {\n        hash = key;\n    } else if (this._signatureMethod == \"RSA-SHA1\") {\n        key = this._privateKey || \"\";\n        hash = crypto.createSign(\"RSA-SHA1\").update(signatureBase).sign(key, \"base64\");\n    } else {\n        if (crypto.Hmac) {\n            hash = crypto.createHmac(\"sha1\", key).update(signatureBase).digest(\"base64\");\n        } else {\n            hash = sha1.HMACSHA1(key, signatureBase);\n        }\n    }\n    return hash;\n};\nexports.OAuth.prototype.NONCE_CHARS = [\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \"0\",\n    \"1\",\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"7\",\n    \"8\",\n    \"9\"\n];\nexports.OAuth.prototype._getNonce = function(nonceSize) {\n    var result = [];\n    var chars = this.NONCE_CHARS;\n    var char_pos;\n    var nonce_chars_length = chars.length;\n    for(var i = 0; i < nonceSize; i++){\n        char_pos = Math.floor(Math.random() * nonce_chars_length);\n        result[i] = chars[char_pos];\n    }\n    return result.join(\"\");\n};\nexports.OAuth.prototype._createClient = function(port, hostname, method, path, headers, sslEnabled) {\n    var options = {\n        host: hostname,\n        port: port,\n        path: path,\n        method: method,\n        headers: headers\n    };\n    var httpModel;\n    if (sslEnabled) {\n        httpModel = https;\n    } else {\n        httpModel = http;\n    }\n    return httpModel.request(options);\n};\nexports.OAuth.prototype._prepareParameters = function(oauth_token, oauth_token_secret, method, url, extra_params) {\n    var oauthParameters = {\n        \"oauth_timestamp\": this._getTimestamp(),\n        \"oauth_nonce\": this._getNonce(this._nonceSize),\n        \"oauth_version\": this._version,\n        \"oauth_signature_method\": this._signatureMethod,\n        \"oauth_consumer_key\": this._consumerKey\n    };\n    if (oauth_token) {\n        oauthParameters[\"oauth_token\"] = oauth_token;\n    }\n    var sig;\n    if (this._isEcho) {\n        sig = this._getSignature(\"GET\", this._verifyCredentials, this._normaliseRequestParams(oauthParameters), oauth_token_secret);\n    } else {\n        if (extra_params) {\n            for(var key in extra_params){\n                if (extra_params.hasOwnProperty(key)) oauthParameters[key] = extra_params[key];\n            }\n        }\n        var parsedUrl = URL.parse(url, false);\n        if (parsedUrl.query) {\n            var key2;\n            var extraParameters = querystring.parse(parsedUrl.query);\n            for(var key in extraParameters){\n                var value = extraParameters[key];\n                if (typeof value == \"object\") {\n                    // TODO: This probably should be recursive\n                    for(key2 in value){\n                        oauthParameters[key + \"[\" + key2 + \"]\"] = value[key2];\n                    }\n                } else {\n                    oauthParameters[key] = value;\n                }\n            }\n        }\n        sig = this._getSignature(method, url, this._normaliseRequestParams(oauthParameters), oauth_token_secret);\n    }\n    var orderedParameters = this._sortRequestParams(this._makeArrayOfArgumentsHash(oauthParameters));\n    orderedParameters[orderedParameters.length] = [\n        \"oauth_signature\",\n        sig\n    ];\n    return orderedParameters;\n};\nexports.OAuth.prototype._performSecureRequest = function(oauth_token, oauth_token_secret, method, url, extra_params, post_body, post_content_type, callback) {\n    var orderedParameters = this._prepareParameters(oauth_token, oauth_token_secret, method, url, extra_params);\n    if (!post_content_type) {\n        post_content_type = \"application/x-www-form-urlencoded\";\n    }\n    var parsedUrl = URL.parse(url, false);\n    if (parsedUrl.protocol == \"http:\" && !parsedUrl.port) parsedUrl.port = 80;\n    if (parsedUrl.protocol == \"https:\" && !parsedUrl.port) parsedUrl.port = 443;\n    var headers = {};\n    var authorization = this._buildAuthorizationHeaders(orderedParameters);\n    if (this._isEcho) {\n        headers[\"X-Verify-Credentials-Authorization\"] = authorization;\n    } else {\n        headers[\"Authorization\"] = authorization;\n    }\n    headers[\"Host\"] = parsedUrl.host;\n    for(var key in this._headers){\n        if (this._headers.hasOwnProperty(key)) {\n            headers[key] = this._headers[key];\n        }\n    }\n    // Filter out any passed extra_params that are really to do with OAuth\n    for(var key in extra_params){\n        if (this._isParameterNameAnOAuthParameter(key)) {\n            delete extra_params[key];\n        }\n    }\n    if ((method == \"POST\" || method == \"PUT\") && post_body == null && extra_params != null) {\n        // Fix the mismatch between the output of querystring.stringify() and this._encodeData()\n        post_body = querystring.stringify(extra_params).replace(/\\!/g, \"%21\").replace(/\\'/g, \"%27\").replace(/\\(/g, \"%28\").replace(/\\)/g, \"%29\").replace(/\\*/g, \"%2A\");\n    }\n    if (post_body) {\n        if (Buffer.isBuffer(post_body)) {\n            headers[\"Content-length\"] = post_body.length;\n        } else {\n            headers[\"Content-length\"] = Buffer.byteLength(post_body);\n        }\n    } else {\n        headers[\"Content-length\"] = 0;\n    }\n    headers[\"Content-Type\"] = post_content_type;\n    var path;\n    if (!parsedUrl.pathname || parsedUrl.pathname == \"\") parsedUrl.pathname = \"/\";\n    if (parsedUrl.query) path = parsedUrl.pathname + \"?\" + parsedUrl.query;\n    else path = parsedUrl.pathname;\n    var request;\n    if (parsedUrl.protocol == \"https:\") {\n        request = this._createClient(parsedUrl.port, parsedUrl.hostname, method, path, headers, true);\n    } else {\n        request = this._createClient(parsedUrl.port, parsedUrl.hostname, method, path, headers);\n    }\n    var clientOptions = this._clientOptions;\n    if (callback) {\n        var data = \"\";\n        var self = this;\n        // Some hosts *cough* google appear to close the connection early / send no content-length header\n        // allow this behaviour.\n        var allowEarlyClose = OAuthUtils.isAnEarlyCloseHost(parsedUrl.hostname);\n        var callbackCalled = false;\n        var passBackControl = function(response) {\n            if (!callbackCalled) {\n                callbackCalled = true;\n                if (response.statusCode >= 200 && response.statusCode <= 299) {\n                    callback(null, data, response);\n                } else {\n                    // Follow 301 or 302 redirects with Location HTTP header\n                    if ((response.statusCode == 301 || response.statusCode == 302) && clientOptions.followRedirects && response.headers && response.headers.location) {\n                        self._performSecureRequest(oauth_token, oauth_token_secret, method, response.headers.location, extra_params, post_body, post_content_type, callback);\n                    } else {\n                        callback({\n                            statusCode: response.statusCode,\n                            data: data\n                        }, data, response);\n                    }\n                }\n            }\n        };\n        request.on(\"response\", function(response) {\n            response.setEncoding(\"utf8\");\n            response.on(\"data\", function(chunk) {\n                data += chunk;\n            });\n            response.on(\"end\", function() {\n                passBackControl(response);\n            });\n            response.on(\"close\", function() {\n                if (allowEarlyClose) {\n                    passBackControl(response);\n                }\n            });\n        });\n        request.on(\"error\", function(err) {\n            if (!callbackCalled) {\n                callbackCalled = true;\n                callback(err);\n            }\n        });\n        if ((method == \"POST\" || method == \"PUT\") && post_body != null && post_body != \"\") {\n            request.write(post_body);\n        }\n        request.end();\n    } else {\n        if ((method == \"POST\" || method == \"PUT\") && post_body != null && post_body != \"\") {\n            request.write(post_body);\n        }\n        return request;\n    }\n    return;\n};\nexports.OAuth.prototype.setClientOptions = function(options) {\n    var key, mergedOptions = {}, hasOwnProperty = Object.prototype.hasOwnProperty;\n    for(key in this._defaultClientOptions){\n        if (!hasOwnProperty.call(options, key)) {\n            mergedOptions[key] = this._defaultClientOptions[key];\n        } else {\n            mergedOptions[key] = options[key];\n        }\n    }\n    this._clientOptions = mergedOptions;\n};\nexports.OAuth.prototype.getOAuthAccessToken = function(oauth_token, oauth_token_secret, oauth_verifier, callback) {\n    var extraParams = {};\n    if (typeof oauth_verifier == \"function\") {\n        callback = oauth_verifier;\n    } else {\n        extraParams.oauth_verifier = oauth_verifier;\n    }\n    this._performSecureRequest(oauth_token, oauth_token_secret, this._clientOptions.accessTokenHttpMethod, this._accessUrl, extraParams, null, null, function(error, data, response) {\n        if (error) callback(error);\n        else {\n            var results = querystring.parse(data);\n            var oauth_access_token = results[\"oauth_token\"];\n            delete results[\"oauth_token\"];\n            var oauth_access_token_secret = results[\"oauth_token_secret\"];\n            delete results[\"oauth_token_secret\"];\n            callback(null, oauth_access_token, oauth_access_token_secret, results);\n        }\n    });\n};\n// Deprecated\nexports.OAuth.prototype.getProtectedResource = function(url, method, oauth_token, oauth_token_secret, callback) {\n    this._performSecureRequest(oauth_token, oauth_token_secret, method, url, null, \"\", null, callback);\n};\nexports.OAuth.prototype[\"delete\"] = function(url, oauth_token, oauth_token_secret, callback) {\n    return this._performSecureRequest(oauth_token, oauth_token_secret, \"DELETE\", url, null, \"\", null, callback);\n};\nexports.OAuth.prototype.get = function(url, oauth_token, oauth_token_secret, callback) {\n    return this._performSecureRequest(oauth_token, oauth_token_secret, \"GET\", url, null, \"\", null, callback);\n};\nexports.OAuth.prototype._putOrPost = function(method, url, oauth_token, oauth_token_secret, post_body, post_content_type, callback) {\n    var extra_params = null;\n    if (typeof post_content_type == \"function\") {\n        callback = post_content_type;\n        post_content_type = null;\n    }\n    if (typeof post_body != \"string\" && !Buffer.isBuffer(post_body)) {\n        post_content_type = \"application/x-www-form-urlencoded\";\n        extra_params = post_body;\n        post_body = null;\n    }\n    return this._performSecureRequest(oauth_token, oauth_token_secret, method, url, extra_params, post_body, post_content_type, callback);\n};\nexports.OAuth.prototype.put = function(url, oauth_token, oauth_token_secret, post_body, post_content_type, callback) {\n    return this._putOrPost(\"PUT\", url, oauth_token, oauth_token_secret, post_body, post_content_type, callback);\n};\nexports.OAuth.prototype.post = function(url, oauth_token, oauth_token_secret, post_body, post_content_type, callback) {\n    return this._putOrPost(\"POST\", url, oauth_token, oauth_token_secret, post_body, post_content_type, callback);\n};\n/**\n * Gets a request token from the OAuth provider and passes that information back\n * to the calling code.\n *\n * The callback should expect a function of the following form:\n *\n * function(err, token, token_secret, parsedQueryString) {}\n *\n * This method has optional parameters so can be called in the following 2 ways:\n *\n * 1) Primary use case: Does a basic request with no extra parameters\n *  getOAuthRequestToken( callbackFunction )\n *\n * 2) As above but allows for provision of extra parameters to be sent as part of the query to the server.\n *  getOAuthRequestToken( extraParams, callbackFunction )\n *\n * N.B. This method will HTTP POST verbs by default, if you wish to override this behaviour you will\n * need to provide a requestTokenHttpMethod option when creating the client.\n *\n **/ exports.OAuth.prototype.getOAuthRequestToken = function(extraParams, callback) {\n    if (typeof extraParams == \"function\") {\n        callback = extraParams;\n        extraParams = {};\n    }\n    // Callbacks are 1.0A related\n    if (this._authorize_callback) {\n        extraParams[\"oauth_callback\"] = this._authorize_callback;\n    }\n    this._performSecureRequest(null, null, this._clientOptions.requestTokenHttpMethod, this._requestUrl, extraParams, null, null, function(error, data, response) {\n        if (error) callback(error);\n        else {\n            var results = querystring.parse(data);\n            var oauth_token = results[\"oauth_token\"];\n            var oauth_token_secret = results[\"oauth_token_secret\"];\n            delete results[\"oauth_token\"];\n            delete results[\"oauth_token_secret\"];\n            callback(null, oauth_token, oauth_token_secret, results);\n        }\n    });\n};\nexports.OAuth.prototype.signUrl = function(url, oauth_token, oauth_token_secret, method) {\n    if (method === undefined) {\n        var method = \"GET\";\n    }\n    var orderedParameters = this._prepareParameters(oauth_token, oauth_token_secret, method, url, {});\n    var parsedUrl = URL.parse(url, false);\n    var query = \"\";\n    for(var i = 0; i < orderedParameters.length; i++){\n        query += orderedParameters[i][0] + \"=\" + this._encodeData(orderedParameters[i][1]) + \"&\";\n    }\n    query = query.substring(0, query.length - 1);\n    return parsedUrl.protocol + \"//\" + parsedUrl.host + parsedUrl.pathname + \"?\" + query;\n};\nexports.OAuth.prototype.authHeader = function(url, oauth_token, oauth_token_secret, method) {\n    if (method === undefined) {\n        var method = \"GET\";\n    }\n    var orderedParameters = this._prepareParameters(oauth_token, oauth_token_secret, method, url, {});\n    return this._buildAuthorizationHeaders(orderedParameters);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/oauth/lib/oauth.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/oauth/lib/oauth2.js":
/*!******************************************!*\
  !*** ./node_modules/oauth/lib/oauth2.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var querystring = __webpack_require__(/*! querystring */ \"querystring\"), crypto = __webpack_require__(/*! crypto */ \"crypto\"), https = __webpack_require__(/*! https */ \"https\"), http = __webpack_require__(/*! http */ \"http\"), URL = __webpack_require__(/*! url */ \"url\"), OAuthUtils = __webpack_require__(/*! ./_utils */ \"(rsc)/./node_modules/oauth/lib/_utils.js\");\nexports.OAuth2 = function(clientId, clientSecret, baseSite, authorizePath, accessTokenPath, customHeaders) {\n    this._clientId = clientId;\n    this._clientSecret = clientSecret;\n    this._baseSite = baseSite;\n    this._authorizeUrl = authorizePath || \"/oauth/authorize\";\n    this._accessTokenUrl = accessTokenPath || \"/oauth/access_token\";\n    this._accessTokenName = \"access_token\";\n    this._authMethod = \"Bearer\";\n    this._customHeaders = customHeaders || {};\n    this._useAuthorizationHeaderForGET = false;\n    //our agent\n    this._agent = undefined;\n};\n// Allows you to set an agent to use instead of the default HTTP or\n// HTTPS agents. Useful when dealing with your own certificates.\nexports.OAuth2.prototype.setAgent = function(agent) {\n    this._agent = agent;\n};\n// This 'hack' method is required for sites that don't use\n// 'access_token' as the name of the access token (for requests).\n// ( http://tools.ietf.org/html/draft-ietf-oauth-v2-16#section-7 )\n// it isn't clear what the correct value should be atm, so allowing\n// for specific (temporary?) override for now.\nexports.OAuth2.prototype.setAccessTokenName = function(name) {\n    this._accessTokenName = name;\n};\n// Sets the authorization method for Authorization header.\n// e.g. Authorization: Bearer <token>  # \"Bearer\" is the authorization method.\nexports.OAuth2.prototype.setAuthMethod = function(authMethod) {\n    this._authMethod = authMethod;\n};\n// If you use the OAuth2 exposed 'get' method (and don't construct your own _request call )\n// this will specify whether to use an 'Authorize' header instead of passing the access_token as a query parameter\nexports.OAuth2.prototype.useAuthorizationHeaderforGET = function(useIt) {\n    this._useAuthorizationHeaderForGET = useIt;\n};\nexports.OAuth2.prototype._getAccessTokenUrl = function() {\n    return this._baseSite + this._accessTokenUrl; /* + \"?\" + querystring.stringify(params); */ \n};\n// Build the authorization header. In particular, build the part after the colon.\n// e.g. Authorization: Bearer <token>  # Build \"Bearer <token>\"\nexports.OAuth2.prototype.buildAuthHeader = function(token) {\n    return this._authMethod + \" \" + token;\n};\nexports.OAuth2.prototype._chooseHttpLibrary = function(parsedUrl) {\n    var http_library = https;\n    // As this is OAUth2, we *assume* https unless told explicitly otherwise.\n    if (parsedUrl.protocol != \"https:\") {\n        http_library = http;\n    }\n    return http_library;\n};\nexports.OAuth2.prototype._request = function(method, url, headers, post_body, access_token, callback) {\n    var parsedUrl = URL.parse(url, true);\n    if (parsedUrl.protocol == \"https:\" && !parsedUrl.port) {\n        parsedUrl.port = 443;\n    }\n    var http_library = this._chooseHttpLibrary(parsedUrl);\n    var realHeaders = {};\n    for(var key in this._customHeaders){\n        realHeaders[key] = this._customHeaders[key];\n    }\n    if (headers) {\n        for(var key in headers){\n            realHeaders[key] = headers[key];\n        }\n    }\n    realHeaders[\"Host\"] = parsedUrl.host;\n    if (!realHeaders[\"User-Agent\"]) {\n        realHeaders[\"User-Agent\"] = \"Node-oauth\";\n    }\n    if (post_body) {\n        if (Buffer.isBuffer(post_body)) {\n            realHeaders[\"Content-Length\"] = post_body.length;\n        } else {\n            realHeaders[\"Content-Length\"] = Buffer.byteLength(post_body);\n        }\n    } else {\n        realHeaders[\"Content-length\"] = 0;\n    }\n    if (access_token && !(\"Authorization\" in realHeaders)) {\n        if (!parsedUrl.query) parsedUrl.query = {};\n        parsedUrl.query[this._accessTokenName] = access_token;\n    }\n    var queryStr = querystring.stringify(parsedUrl.query);\n    if (queryStr) queryStr = \"?\" + queryStr;\n    var options = {\n        host: parsedUrl.hostname,\n        port: parsedUrl.port,\n        path: parsedUrl.pathname + queryStr,\n        method: method,\n        headers: realHeaders\n    };\n    this._executeRequest(http_library, options, post_body, callback);\n};\nexports.OAuth2.prototype._executeRequest = function(http_library, options, post_body, callback) {\n    // Some hosts *cough* google appear to close the connection early / send no content-length header\n    // allow this behaviour.\n    var allowEarlyClose = OAuthUtils.isAnEarlyCloseHost(options.host);\n    var callbackCalled = false;\n    function passBackControl(response, result) {\n        if (!callbackCalled) {\n            callbackCalled = true;\n            if (!(response.statusCode >= 200 && response.statusCode <= 299) && response.statusCode != 301 && response.statusCode != 302) {\n                callback({\n                    statusCode: response.statusCode,\n                    data: result\n                });\n            } else {\n                callback(null, result, response);\n            }\n        }\n    }\n    var result = \"\";\n    //set the agent on the request options\n    if (this._agent) {\n        options.agent = this._agent;\n    }\n    var request = http_library.request(options);\n    request.on(\"response\", function(response) {\n        response.on(\"data\", function(chunk) {\n            result += chunk;\n        });\n        response.on(\"close\", function(err) {\n            if (allowEarlyClose) {\n                passBackControl(response, result);\n            }\n        });\n        response.addListener(\"end\", function() {\n            passBackControl(response, result);\n        });\n    });\n    request.on(\"error\", function(e) {\n        callbackCalled = true;\n        callback(e);\n    });\n    if ((options.method == \"POST\" || options.method == \"PUT\") && post_body) {\n        request.write(post_body);\n    }\n    request.end();\n};\nexports.OAuth2.prototype.getAuthorizeUrl = function(params) {\n    var params = params || {};\n    params[\"client_id\"] = this._clientId;\n    return this._baseSite + this._authorizeUrl + \"?\" + querystring.stringify(params);\n};\nexports.OAuth2.prototype.getOAuthAccessToken = function(code, params, callback) {\n    var params = params || {};\n    params[\"client_id\"] = this._clientId;\n    params[\"client_secret\"] = this._clientSecret;\n    var codeParam = params.grant_type === \"refresh_token\" ? \"refresh_token\" : \"code\";\n    params[codeParam] = code;\n    var post_data = querystring.stringify(params);\n    var post_headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n    };\n    this._request(\"POST\", this._getAccessTokenUrl(), post_headers, post_data, null, function(error, data, response) {\n        if (error) callback(error);\n        else {\n            var results;\n            try {\n                // As of http://tools.ietf.org/html/draft-ietf-oauth-v2-07\n                // responses should be in JSON\n                results = JSON.parse(data);\n            } catch (e) {\n                // .... However both Facebook + Github currently use rev05 of the spec\n                // and neither seem to specify a content-type correctly in their response headers :(\n                // clients of these services will suffer a *minor* performance cost of the exception\n                // being thrown\n                results = querystring.parse(data);\n            }\n            var access_token = results[\"access_token\"];\n            var refresh_token = results[\"refresh_token\"];\n            delete results[\"refresh_token\"];\n            callback(null, access_token, refresh_token, results); // callback results =-=\n        }\n    });\n};\n// Deprecated\nexports.OAuth2.prototype.getProtectedResource = function(url, access_token, callback) {\n    this._request(\"GET\", url, {}, \"\", access_token, callback);\n};\nexports.OAuth2.prototype.get = function(url, access_token, callback) {\n    if (this._useAuthorizationHeaderForGET) {\n        var headers = {\n            \"Authorization\": this.buildAuthHeader(access_token)\n        };\n        access_token = null;\n    } else {\n        headers = {};\n    }\n    this._request(\"GET\", url, headers, \"\", access_token, callback);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/oauth/lib/oauth2.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/oauth/lib/sha1.js":
/*!****************************************!*\
  !*** ./node_modules/oauth/lib/sha1.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS 180-1\n * Version 2.2 Copyright Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */ /*\n * Configurable variables. You may need to tweak these to be compatible with\n * the server-side, but the defaults work in most cases.\n */ var hexcase = 1; /* hex output format. 0 - lowercase; 1 - uppercase        */ \nvar b64pad = \"=\"; /* base-64 pad character. \"=\" for strict RFC compliance   */ \n/*\n * These are the functions you'll usually want to call\n * They take string arguments and return either hex or base-64 encoded strings\n */ function hex_sha1(s) {\n    return rstr2hex(rstr_sha1(str2rstr_utf8(s)));\n}\nfunction b64_sha1(s) {\n    return rstr2b64(rstr_sha1(str2rstr_utf8(s)));\n}\nfunction any_sha1(s, e) {\n    return rstr2any(rstr_sha1(str2rstr_utf8(s)), e);\n}\nfunction hex_hmac_sha1(k, d) {\n    return rstr2hex(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)));\n}\nfunction b64_hmac_sha1(k, d) {\n    return rstr2b64(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)));\n}\nfunction any_hmac_sha1(k, d, e) {\n    return rstr2any(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)), e);\n}\n/*\n * Perform a simple self-test to see if the VM is working\n */ function sha1_vm_test() {\n    return hex_sha1(\"abc\").toLowerCase() == \"a9993e364706816aba3e25717850c26c9cd0d89d\";\n}\n/*\n * Calculate the SHA1 of a raw string\n */ function rstr_sha1(s) {\n    return binb2rstr(binb_sha1(rstr2binb(s), s.length * 8));\n}\n/*\n * Calculate the HMAC-SHA1 of a key and some data (raw strings)\n */ function rstr_hmac_sha1(key, data) {\n    var bkey = rstr2binb(key);\n    if (bkey.length > 16) bkey = binb_sha1(bkey, key.length * 8);\n    var ipad = Array(16), opad = Array(16);\n    for(var i = 0; i < 16; i++){\n        ipad[i] = bkey[i] ^ 0x36363636;\n        opad[i] = bkey[i] ^ 0x5C5C5C5C;\n    }\n    var hash = binb_sha1(ipad.concat(rstr2binb(data)), 512 + data.length * 8);\n    return binb2rstr(binb_sha1(opad.concat(hash), 512 + 160));\n}\n/*\n * Convert a raw string to a hex string\n */ function rstr2hex(input) {\n    try {\n        hexcase;\n    } catch (e) {\n        hexcase = 0;\n    }\n    var hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";\n    var output = \"\";\n    var x;\n    for(var i = 0; i < input.length; i++){\n        x = input.charCodeAt(i);\n        output += hex_tab.charAt(x >>> 4 & 0x0F) + hex_tab.charAt(x & 0x0F);\n    }\n    return output;\n}\n/*\n * Convert a raw string to a base-64 string\n */ function rstr2b64(input) {\n    try {\n        b64pad;\n    } catch (e) {\n        b64pad = \"\";\n    }\n    var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    var output = \"\";\n    var len = input.length;\n    for(var i = 0; i < len; i += 3){\n        var triplet = input.charCodeAt(i) << 16 | (i + 1 < len ? input.charCodeAt(i + 1) << 8 : 0) | (i + 2 < len ? input.charCodeAt(i + 2) : 0);\n        for(var j = 0; j < 4; j++){\n            if (i * 8 + j * 6 > input.length * 8) output += b64pad;\n            else output += tab.charAt(triplet >>> 6 * (3 - j) & 0x3F);\n        }\n    }\n    return output;\n}\n/*\n * Convert a raw string to an arbitrary string encoding\n */ function rstr2any(input, encoding) {\n    var divisor = encoding.length;\n    var remainders = Array();\n    var i, q, x, quotient;\n    /* Convert to an array of 16-bit big-endian values, forming the dividend */ var dividend = Array(Math.ceil(input.length / 2));\n    for(i = 0; i < dividend.length; i++){\n        dividend[i] = input.charCodeAt(i * 2) << 8 | input.charCodeAt(i * 2 + 1);\n    }\n    /*\n   * Repeatedly perform a long division. The binary array forms the dividend,\n   * the length of the encoding is the divisor. Once computed, the quotient\n   * forms the dividend for the next step. We stop when the dividend is zero.\n   * All remainders are stored for later use.\n   */ while(dividend.length > 0){\n        quotient = Array();\n        x = 0;\n        for(i = 0; i < dividend.length; i++){\n            x = (x << 16) + dividend[i];\n            q = Math.floor(x / divisor);\n            x -= q * divisor;\n            if (quotient.length > 0 || q > 0) quotient[quotient.length] = q;\n        }\n        remainders[remainders.length] = x;\n        dividend = quotient;\n    }\n    /* Convert the remainders to the output string */ var output = \"\";\n    for(i = remainders.length - 1; i >= 0; i--)output += encoding.charAt(remainders[i]);\n    /* Append leading zero equivalents */ var full_length = Math.ceil(input.length * 8 / (Math.log(encoding.length) / Math.log(2)));\n    for(i = output.length; i < full_length; i++)output = encoding[0] + output;\n    return output;\n}\n/*\n * Encode a string as utf-8.\n * For efficiency, this assumes the input is valid utf-16.\n */ function str2rstr_utf8(input) {\n    var output = \"\";\n    var i = -1;\n    var x, y;\n    while(++i < input.length){\n        /* Decode utf-16 surrogate pairs */ x = input.charCodeAt(i);\n        y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;\n        if (0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF) {\n            x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);\n            i++;\n        }\n        /* Encode output as utf-8 */ if (x <= 0x7F) output += String.fromCharCode(x);\n        else if (x <= 0x7FF) output += String.fromCharCode(0xC0 | x >>> 6 & 0x1F, 0x80 | x & 0x3F);\n        else if (x <= 0xFFFF) output += String.fromCharCode(0xE0 | x >>> 12 & 0x0F, 0x80 | x >>> 6 & 0x3F, 0x80 | x & 0x3F);\n        else if (x <= 0x1FFFFF) output += String.fromCharCode(0xF0 | x >>> 18 & 0x07, 0x80 | x >>> 12 & 0x3F, 0x80 | x >>> 6 & 0x3F, 0x80 | x & 0x3F);\n    }\n    return output;\n}\n/*\n * Encode a string as utf-16\n */ function str2rstr_utf16le(input) {\n    var output = \"\";\n    for(var i = 0; i < input.length; i++)output += String.fromCharCode(input.charCodeAt(i) & 0xFF, input.charCodeAt(i) >>> 8 & 0xFF);\n    return output;\n}\nfunction str2rstr_utf16be(input) {\n    var output = \"\";\n    for(var i = 0; i < input.length; i++)output += String.fromCharCode(input.charCodeAt(i) >>> 8 & 0xFF, input.charCodeAt(i) & 0xFF);\n    return output;\n}\n/*\n * Convert a raw string to an array of big-endian words\n * Characters >255 have their high-byte silently ignored.\n */ function rstr2binb(input) {\n    var output = Array(input.length >> 2);\n    for(var i = 0; i < output.length; i++)output[i] = 0;\n    for(var i = 0; i < input.length * 8; i += 8)output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << 24 - i % 32;\n    return output;\n}\n/*\n * Convert an array of big-endian words to a string\n */ function binb2rstr(input) {\n    var output = \"\";\n    for(var i = 0; i < input.length * 32; i += 8)output += String.fromCharCode(input[i >> 5] >>> 24 - i % 32 & 0xFF);\n    return output;\n}\n/*\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\n */ function binb_sha1(x, len) {\n    /* append padding */ x[len >> 5] |= 0x80 << 24 - len % 32;\n    x[(len + 64 >> 9 << 4) + 15] = len;\n    var w = Array(80);\n    var a = 1732584193;\n    var b = -271733879;\n    var c = -1732584194;\n    var d = 271733878;\n    var e = -1009589776;\n    for(var i = 0; i < x.length; i += 16){\n        var olda = a;\n        var oldb = b;\n        var oldc = c;\n        var oldd = d;\n        var olde = e;\n        for(var j = 0; j < 80; j++){\n            if (j < 16) w[j] = x[i + j];\n            else w[j] = bit_rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n            var t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));\n            e = d;\n            d = c;\n            c = bit_rol(b, 30);\n            b = a;\n            a = t;\n        }\n        a = safe_add(a, olda);\n        b = safe_add(b, oldb);\n        c = safe_add(c, oldc);\n        d = safe_add(d, oldd);\n        e = safe_add(e, olde);\n    }\n    return Array(a, b, c, d, e);\n}\n/*\n * Perform the appropriate triplet combination function for the current\n * iteration\n */ function sha1_ft(t, b, c, d) {\n    if (t < 20) return b & c | ~b & d;\n    if (t < 40) return b ^ c ^ d;\n    if (t < 60) return b & c | b & d | c & d;\n    return b ^ c ^ d;\n}\n/*\n * Determine the appropriate additive constant for the current iteration\n */ function sha1_kt(t) {\n    return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */ function safe_add(x, y) {\n    var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n    return msw << 16 | lsw & 0xFFFF;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */ function bit_rol(num, cnt) {\n    return num << cnt | num >>> 32 - cnt;\n}\nexports.HMACSHA1 = function(key, data) {\n    return b64_hmac_sha1(key, data);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/oauth/lib/sha1.js\n");

/***/ })

};
;